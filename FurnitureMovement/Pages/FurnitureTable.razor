@page "/FurnitureTable"
@using FurnitureMovement.Data
@using FurnitureMovement.Services
@using Blazorise
@using Blazorise.DataGrid
@using Blazorise.Icons.FontAwesome
@inject IJSRuntime JSRuntime
@inject IOrderService OrderService

<PageTitle>Список оснастки</PageTitle>

<h3>Таблица списка оснастки</h3>

<Button Color="Color.Primary" @onclick="ShowAddModal">Добавить оснастку</Button>

<DataGrid TItem="FurnitureName"
          Data="@FurnitureNames"
          ShowPager="true"
          PageSize="10">
    <DataGridColumns>
        <DataGridColumn TItem="FurnitureName" Field="@nameof(FurnitureName.ID)" Caption="ID" />
        <DataGridColumn TItem="FurnitureName" Field="@nameof(FurnitureName.Name)" Caption="Наименование" />
        <DataGridColumn TItem="FurnitureName" Field="@nameof(FurnitureName.Material)" Caption="Материал" />
        <DataGridColumn TItem="FurnitureName" Field="@nameof(FurnitureName.ProductionTime)" Caption="Время производства" />
        <DataGridColumn TItem="FurnitureName" Caption="Чертеж">
            <DisplayTemplate Context="furnitureName">
                @if (furnitureName.Drawing != "Не указано")
                {
                    <Button Color="Color.Info" Size="Size.Small" @onclick="() => ShowDrawingModal(furnitureName.Drawing)">
                        Показать чертеж
                    </Button>
                }
                else
                {
                    <span>Не указано</span>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="FurnitureName" Caption="Изображение">
            <DisplayTemplate Context="furnitureName">
                @if (furnitureName.Image != "Не указано")
                {
                    <Button Color="Color.Info" Size="Size.Small" @onclick="() => ShowImageModal(furnitureName.Image)">
                        Показать фото
                    </Button>
                }
                else
                {
                    <span>Не указано</span>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="FurnitureName" Caption="Действия" Sortable="false">
            <DisplayTemplate Context="name">
                <div class="d-flex justify-content-end gap-2">
                    <Button Color="Color.Primary" Size="Size.Small" @onclick="() => EditName(name)">
                        ✏️
                    </Button>
                    <Button Color="Color.Danger" Size="Size.Small" @onclick="() => DeleteName(name)">
                        🗑️
                    </Button>
                </div>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

<!-- Модальное окно добавления -->
<Modal @ref="addModalRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>@(isEditing ? "Редактировать" : "Добавить") оснастку</ModalTitle>
            <CloseButton @onclick="HideAddModal" />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Наименование оснастки</FieldLabel>
                <TextEdit @bind-Text="currentFurnitureName.Name" />
                @if (string.IsNullOrWhiteSpace(currentFurnitureName.Name))
                {
                    <FieldHelp Style="color: red;">Наименование не может быть пустым</FieldHelp>
                }
            </Field>
            <Field>
                <FieldLabel>Материал</FieldLabel>
                <TextEdit @bind-Text="currentFurnitureName.Material" />
            </Field>
            <Field>
                <FieldLabel>Время производства</FieldLabel>
                <TextEdit @bind-Text="currentFurnitureName.ProductionTime" />
            </Field>
            <Field>
                <FieldLabel>Чертеж (ссылка или описание)</FieldLabel>
                <TextEdit @bind-Text="currentFurnitureName.Drawing" />
            </Field>
            <Field>
                <FieldLabel>Изображение (путь или URL)</FieldLabel>
                <TextEdit @bind-Text="currentFurnitureName.Image" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideAddModal">Отмена</Button>
            <Button Color="Color.Primary" @onclick="SaveFurnitureName">Сохранить</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Модальное окно для изображения -->
<Modal @ref="imageModalRef" Centered>
    <ModalContent Style="text-align: center;">
        <ModalHeader>
            <ModalTitle>Просмотр изображения</ModalTitle>
            <CloseButton @onclick="HideImageModal" />
        </ModalHeader>
        <ModalBody>
            @if (!string.IsNullOrEmpty(currentImage) && currentImage != "Не указано")
            {
                <img src="@currentImage" alt="Изображение оснастки" style="max-width: 90%; max-height: 80vh;" />
            }
            else
            {
                <p>Изображение недоступно</p>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideImageModal">Закрыть</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- Модальное окно для чертежа -->
<Modal @ref="drawingModalRef" Centered>
    <ModalContent Style="text-align: center;">
        <ModalHeader>
            <ModalTitle>Просмотр чертежа</ModalTitle>
            <CloseButton @onclick="HideDrawingModal" />
        </ModalHeader>
        <ModalBody>
            @if (!string.IsNullOrEmpty(currentDrawing) && currentDrawing != "Не указано")
            {
                <img src="@currentDrawing" alt="Чертеж оснастки" style="max-width: 90%; max-height: 80vh;" />
            }
            else
            {
                <p>Чертеж недоступен</p>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideDrawingModal">Закрыть</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal addModalRef = new Modal();
    private Modal imageModalRef = new Modal();
    private Modal drawingModalRef = new Modal();
    private List<FurnitureName> FurnitureNames = new();
    private FurnitureName currentFurnitureName = new();
    private bool isEditing = false;
    private string currentImage = "";
    private string currentDrawing = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadFurnitureNames();
    }

    private async Task LoadFurnitureNames()
    {
        FurnitureNames = await OrderService.GetAllFurnitureNames();
        FurnitureNames = FurnitureNames.Where(fn => fn.DeleteIndicator == 0).ToList();
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        currentFurnitureName = new FurnitureName();
        isEditing = false;
        addModalRef.Show();
    }

    private void HideAddModal()
    {
        addModalRef.Hide();
    }

    private async Task SaveFurnitureName()
    {
        if (string.IsNullOrWhiteSpace(currentFurnitureName.Name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Наименование не может быть пустым!");
            return;
        }

        // Устанавливаем значения по умолчанию, если поля пустые
        currentFurnitureName.Drawing = string.IsNullOrWhiteSpace(currentFurnitureName.Drawing) ? "Не указано" : currentFurnitureName.Drawing;
        currentFurnitureName.Image = string.IsNullOrWhiteSpace(currentFurnitureName.Image) ? "Не указано" : currentFurnitureName.Image;

        try
        {
            Console.WriteLine($"Saving FurnitureName: ID={currentFurnitureName.ID}, Name={currentFurnitureName.Name}, Material={currentFurnitureName.Material}, ProductionTime={currentFurnitureName.ProductionTime}, Drawing={currentFurnitureName.Drawing}, Image={currentFurnitureName.Image}");

            if (isEditing)
            {
                await OrderService.UpdateFurnitureName(currentFurnitureName);
            }
            else
            {
                await OrderService.AddFurnitureName(currentFurnitureName);
            }

            await LoadFurnitureNames();
            addModalRef.Hide();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private void EditName(FurnitureName name)
    {
        currentFurnitureName = new FurnitureName
            {
                ID = name.ID,
                Name = name.Name,
                Material = name.Material,
                ProductionTime = name.ProductionTime,
                Drawing = name.Drawing,
                Image = name.Image,
                DeleteIndicator = name.DeleteIndicator
            };
        isEditing = true;
        addModalRef.Show();
    }

    private async Task DeleteName(FurnitureName name)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Удалить оснастку {name.Name}?");
        if (!confirm) return;

        try
        {
            await OrderService.DeleteFurnitureName(name.ID);
            await LoadFurnitureNames();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private void ShowImageModal(string imageUrl)
    {
        currentImage = imageUrl;
        imageModalRef.Show();
    }

    private void HideImageModal()
    {
        imageModalRef.Hide();
        currentImage = "";
    }

    private void ShowDrawingModal(string drawingUrl)
    {
        currentDrawing = drawingUrl;
        drawingModalRef.Show();
    }

    private void HideDrawingModal()
    {
        drawingModalRef.Hide();
        currentDrawing = "";
    }
}