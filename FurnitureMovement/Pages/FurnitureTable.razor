@page "/FurnitureTable"
@using FurnitureMovement.Data
@using FurnitureMovement.Services
@using Blazorise
@using Blazorise.DataGrid
@using Blazorise.Icons.FontAwesome
@inject IJSRuntime JSRuntime
@inject IOrderService OrderService

<PageTitle>Список оснастки</PageTitle>

<h3>Таблица списка оснастки</h3>

<Button Color="Color.Primary" @onclick="ShowAddModal">Добавить оснастку</Button>

<DataGrid TItem="FurnitureName"
          Data="@FurnitureNames"
          ShowPager="true"
          PageSize="10">
    <DataGridColumns>
        <DataGridColumn TItem="FurnitureName" Field="@nameof(FurnitureName.ID)" Caption="ID" />
        <DataGridColumn TItem="FurnitureName" Field="@nameof(FurnitureName.Name)" Caption="Наименование" />
        <DataGridColumn TItem="FurnitureName" Caption="Действия" Sortable="false">
            <DisplayTemplate Context="item">
                <div class="d-flex justify-content-end gap-2">
                    <Button Color="Color.Primary" Size="Size.Small" @onclick="() => EditItem(item)">
                        ✏️
                    </Button>
                    <Button Color="Color.Danger" Size="Size.Small" @onclick="() => DeleteItem(item)">
                        🗑️
                    </Button>
                </div>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

<!-- Модальное окно добавления -->
<Modal @ref="addModalRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>@(isEditing ? "Редактировать" : "Добавить") оснастку</ModalTitle>
            <CloseButton @onclick="HideAddModal" />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Наименование оснастки</FieldLabel>
                <TextEdit @bind-Text="currentOrderName.Name" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideAddModal">Отмена</Button>
            <Button Color="Color.Primary" @onclick="SaveOrderName">Сохранить</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private Modal addModalRef = new Modal();
    private List<FurnitureName> FurnitureNames = new();
    private FurnitureName currentOrderName = new();
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderNames();
    }

    private async Task LoadOrderNames()
    {
        FurnitureNames = await OrderService.GetAllOrderNames();
        StateHasChanged();
    }

    private void ShowAddModal()
    {
        currentOrderName = new FurnitureName();
        isEditing = false;
        addModalRef.Show();
    }

    private void HideAddModal()
    {
        addModalRef.Hide();
    }

    private async Task SaveOrderName()
    {
        if (string.IsNullOrWhiteSpace(currentOrderName.Name))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Наименование не может быть пустым!");
            return;
        }

        try
        {
            if (isEditing)
            {
                await OrderService.UpdateOrderName(currentOrderName);
            }
            else
            {
                await OrderService.AddOrderName(currentOrderName);
            }

            await LoadOrderNames();
            addModalRef.Hide();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private void EditItem(FurnitureName item)
    {
        currentOrderName = new FurnitureName { ID = item.ID, Name = item.Name };
        isEditing = true;
        addModalRef.Show();
    }

    private async Task DeleteItem(FurnitureName item)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Удалить оснастку {item.Name}?");
        if (!confirm) return;

        try
        {
            await OrderService.DeleteOrderName(item.ID);
            await LoadOrderNames();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }
}