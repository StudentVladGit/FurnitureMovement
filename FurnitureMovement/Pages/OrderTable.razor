@page "/OrderTable"
@using FurnitureMovement.Data
@using FurnitureMovement.Services
@using Blazorise
@using Blazorise.DataGrid
@using Blazorise.Icons.FontAwesome
@inject IOrderService OrderService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Управление</PageTitle>

<h1>Таблица заказов оснастки</h1>

<!-- ПОИСК ЗАКАЗА -->
<Field>
    <FieldLabel>Поиск по любому полю</FieldLabel>
    <TextEdit @bind-Text="searchTerm" Placeholder="Введите текст для поиска" Debounce="true" DebounceInterval="300" />
</Field>

<!-- КНОПКА "ДОБАВИТЬ" -->
<Button Color="Color.Primary" @onclick="ShowAddModal">Добавить</Button>

@if (orders == null)
{
    <p>Загрузка данных...</p>
}
else
{
    <!-- ТАБЛИЦА ЗАКАЗА ОСНАСТКИ -->
    <DataGrid TItem="Order"
              Data="@filteredOrders"
              ShowPager="true">
        <DataGridColumns>
            <DataGridColumn TItem="Order" Field="@nameof(Order.ID)" Caption="ID" Sortable="true" />
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderNumber)" Caption="Номер" Sortable="true">
                <DisplayTemplate Context="order">
                    <a href="javascript:void(0)" @onclick="() => ShowFurnituresModal(order)">@order.OrderNumber</a>
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderStatus)" Caption="Статус" Sortable="true">
                <DisplayTemplate Context="order">
                    @order.OrderStatus.GetDescription()
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderPriority)" Caption="Приоритет" Sortable="true">
                <DisplayTemplate Context="order">
                    @order.OrderPriority.GetDescription()
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Order" Field="@nameof(Order.AdmissionDate)" Caption="Дата" Sortable="true">
                <DisplayTemplate Context="order">
                    @(order.AdmissionDate.ToString("dd/MM/yyyy"))
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderAuthor)" Caption="Автор" Sortable="false">
                <DisplayTemplate Context="order">
                    @(order.OrderAuthor?.Name ?? "Не указан")
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Order" Caption="Подразделение" Sortable="false">
                <DisplayTemplate Context="order">
                    @(order.OrderAuthor?.Division.GetDescription() ?? "Не указано")
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Order" Caption="Действия" Sortable="false">
                <DisplayTemplate Context="order">
                    <Button Color="Color.Primary" Size="Size.Small" @onclick="() => EditOrder(order)">
                        ✏️
                    </Button>
                    <Button Color="Color.Danger" Size="Size.Small" class="ml-3" @onclick="() => DeleteOrder(order)">
                        🗑️
                    </Button>
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
    </DataGrid>
    <!-- ТАБЛИЦА ЗАКАЗА ОСНАСТКИ -->
}

<!-- МОДАЛЬНОЕ ОКНО ДЛЯ ОТОБРАЖЕНИЯ ПОЗИЦИЙ ОСНАСТКИ -->
<Modal @ref="furnituresModalRef">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader>
            <ModalTitle>Позиции заказа @currentOrder?.OrderNumber</ModalTitle>
            <CloseButton @onclick="HideFurnituresModal" />
        </ModalHeader>
        <ModalBody Style="padding: 0;">
            @if (currentOrder?.Furnitures != null && currentOrder.Furnitures.Any())
            {
                <table class="table table-bordered" style="width: 98%; table-layout: auto; margin: 0 auto;">
                    <thead>
                        <tr>
                            <th style="min-width: 150px;">Наименование</th>
                            <th style="min-width: 100px;">Количество</th>
                            <th style="min-width: 120px;">Материал</th>
                            <th style="min-width: 150px;">Время производства</th>
                            <th style="min-width: 120px;">Чертеж</th>
                            <th style="min-width: 120px;">Изображение</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var furniture in currentOrder.Furnitures)
                        {
                            <tr>
                                <td>@(furniture.FurnitureName?.Name ?? "Не указано")</td>
                                <td>@furniture.OrderQuantity</td>
                                <td>@(furniture.FurnitureName?.Material ?? "Не указано")</td>
                                <td>@(furniture.FurnitureName?.ProductionTime ?? "Не указано")</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(furniture.FurnitureName?.Drawing) && furniture.FurnitureName.Drawing != "Не указано")
                                    {
                                        <Button Color="Color.Info" Size="Size.Small" @onclick="() => ShowDrawingModal(furniture.FurnitureName.Drawing)">
                                            Показать чертеж
                                        </Button>
                                    }
                                    else
                                    {
                                        <span>Не указано</span>
                                    }
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(furniture.FurnitureName?.Image) && furniture.FurnitureName.Image != "Не указано")
                                    {
                                        <Button Color="Color.Info" Size="Size.Small" @onclick="() => ShowImageModal(furniture.FurnitureName.Image)">
                                            Показать фото
                                        </Button>
                                    }
                                    else
                                    {
                                        <span>Не указано</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>Нет позиций для отображения.</p>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideFurnituresModal">Закрыть</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<!-- МОДАЛЬНОЕ ОКНО ДЛЯ ОТОБРАЖЕНИЯ ПОЗИЦИЙ ОСНАСТКИ -->
<!-- МОДАЛЬНОЕ ОКНО ДЛЯ ИЗОБРАЖЕНИЯ -->
<Modal @ref="imageModalRef" Centered>
    <ModalContent Style="text-align: center;">
        <ModalHeader>
            <ModalTitle>Просмотр изображения</ModalTitle>
            <CloseButton @onclick="HideImageModal" />
        </ModalHeader>
        <ModalBody>
            @if (!string.IsNullOrEmpty(currentImage))
            {
                <img src="@currentImage" alt="Изображение оснастки" style="max-width: 90%; max-height: 80vh;" />
            }
            else
            {
                <p>Изображение недоступно</p>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideImageModal">Закрыть</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- МОДАЛЬНОЕ ОКНО ДЛЯ ЧЕРТЕЖА -->
<Modal @ref="drawingModalRef" Centered>
    <ModalContent Style="text-align: center;">
        <ModalHeader>
            <ModalTitle>Просмотр чертежа</ModalTitle>
            <CloseButton @onclick="HideDrawingModal" />
        </ModalHeader>
        <ModalBody>
            @if (!string.IsNullOrEmpty(currentDrawing))
            {
                <img src="@currentDrawing" alt="Чертеж оснастки" style="max-width: 90%; max-height: 80vh;" />
            }
            else
            {
                <p>Чертеж недоступен</p>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideDrawingModal">Закрыть</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- МОДАЛЬНОЕ ОКНО ДОБАВЛЕНИЯ -->
<Modal @ref="addModalRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Добавить новый заказ</ModalTitle>
            <CloseButton @onclick="HideAddModal" />
        </ModalHeader>
        <ModalBody>
            <!-- ПОЛЯ ДЛЯ ВВОДА ДАННЫХ -->
            <Field>
                <FieldLabel>Номер заказа</FieldLabel>
                <TextEdit @bind-Text="newOrder.OrderNumber" />
            </Field>

            <!-- СПИСОК ОСНАСТКИ -->
            <Field>
                <FieldLabel>Оснастка</FieldLabel>
                @if (newFurnitures.Any())
                {
                    @foreach (var furniture in newFurnitures)
                    {
                        var localFurniture = furniture;
                        <div class="mb-3 p-3 border rounded">
                            <Field>
                                <FieldLabel>Наименование</FieldLabel>
                                <Select TValue="int" @bind-SelectedValue="localFurniture.FurnitureNameID">
                                    <SelectItem TValue="int" Value="0" Disabled Hidden>Выберите наименование</SelectItem>
                                 @if (FurnitureNames != null)
                                    {
                                        @foreach (var name in FurnitureNames)
                                        {
                                            <SelectItem TValue="int" Value="@name.ID">@name.Name</SelectItem>
                                        }
                                    }
                                </Select>
                                @if (localFurniture.FurnitureNameID <= 0)
                                {
                                    <FieldHelp Style="color: red;">Необходимо выбрать наименование</FieldHelp>
                                }
                            </Field>

                            <Field>
                                <FieldLabel>Количество</FieldLabel>
                                <NumericEdit TValue="long" @bind-Value="localFurniture.OrderQuantity" />
                            </Field>

                            <Button Color="Color.Danger" Size="Size.Small" @onclick="() => RemoveFurniture(localFurniture)">Удалить</Button>
                        </div>
                    }
                }
                <Button Color="Color.Success" Size="Size.Small" @onclick="AddNewFurniture">Добавить оснастку</Button>
            </Field>

            <Field>
                <FieldLabel>Статус</FieldLabel>
                <Select TValue="OrderStatus" @bind-SelectedValue="newOrder.OrderStatus">
                    @foreach (OrderStatus status in Enum.GetValues(typeof(OrderStatus)))
                    {
                        <SelectItem TValue="OrderStatus" Value="@status">@status.GetDescription()</SelectItem>
                    }
                </Select>
            </Field>

            <Field>
                <FieldLabel>Приоритет</FieldLabel>
                <Select TValue="OrderPriority" @bind-SelectedValue="newOrder.OrderPriority">
                    @foreach (OrderPriority priority in Enum.GetValues(typeof(OrderPriority)))
                    {
                        <SelectItem TValue="OrderPriority" Value="@priority">@priority.GetDescription()</SelectItem>
                    }
                </Select>
            </Field>

            <Field>
                <FieldLabel>Дата</FieldLabel>
                <DateEdit @bind-Date="newOrder.AdmissionDate" />
            </Field>

            <Field>
                <FieldLabel>Автор</FieldLabel>
                <Select TValue="int" @bind-SelectedValue="newOrder.OrderAuthorID">
                    <SelectItem TValue="int" Value="0" Disabled Hidden>Выберите автора</SelectItem>
                    @if (authors != null)
                    {
                        @foreach (var author in authors)
                        {
                            <SelectItem TValue="int" Value="@author.ID">@author.Name</SelectItem>
                        }
                    }
                </Select>
                @if (newOrder.OrderAuthorID <= 0)
                {
                    <FieldHelp Style="color: red;">Необходимо выбрать автора</FieldHelp>
                }
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideAddModal">Отмена</Button>
            <Button Color="Color.Primary" @onclick="SaveOrder">Сохранить</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<!-- МОДАЛЬНОЕ ОКНО ДОБАВЛЕНИЯ -->
<!-- МОДАЛЬНОЕ ОКНО РЕДАКТИРОВАНИЯ -->
<Modal @ref="editModalRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Редактировать заказ</ModalTitle>
            <CloseButton @onclick="() => editModalRef.Hide()" />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Номер заказа</FieldLabel>
                <TextEdit @bind-Text="selectedOrder.OrderNumber" />
            </Field>

            <!-- СПИСОК ОСНАСТКИ -->
            <Field>
                <FieldLabel>Оснастка</FieldLabel>
                @if (selectedFurnitures.Any())
                {
                    @foreach (var furniture in selectedFurnitures)
                    {
                        var localFurniture = furniture;
                        <div class="mb-3 p-3 border rounded">
                            <Field>
                                <FieldLabel>Наименование</FieldLabel>
                                <Select TValue="int" @bind-SelectedValue="localFurniture.FurnitureNameID">
                                    <SelectItem TValue="int" Value="0" Disabled Hidden>Выберите наименование</SelectItem>
                                 @if (FurnitureNames != null)
                                    {
                                        @foreach (var name in FurnitureNames)
                                        {
                                            <SelectItem TValue="int" Value="@name.ID">@name.Name</SelectItem>
                                        }
                                    }
                                </Select>
                                @if (localFurniture.FurnitureNameID <= 0)
                                {
                                    <FieldHelp Style="color: red;">Необходимо выбрать наименование</FieldHelp>
                                }
                            </Field>

                            <Field>
                                <FieldLabel>Количество</FieldLabel>
                                <NumericEdit TValue="long" @bind-Value="localFurniture.OrderQuantity" />
                            </Field>

                            <Button Color="Color.Danger" Size="Size.Small" @onclick="() => RemoveSelectedFurniture(localFurniture)">Удалить</Button>
                        </div>
                    }
                }
                <Button Color="Color.Success" Size="Size.Small" @onclick="AddNewSelectedFurniture">Добавить оснастку</Button>
            </Field>

            <Field>
                <FieldLabel>Статус</FieldLabel>
                <Select TValue="OrderStatus" @bind-SelectedValue="selectedOrder.OrderStatus">
                    @foreach (OrderStatus status in Enum.GetValues(typeof(OrderStatus)))
                    {
                        <SelectItem TValue="OrderStatus" Value="@status">@status.GetDescription()</SelectItem>
                    }
                </Select>
            </Field>

            <Field>
                <FieldLabel>Приоритет</FieldLabel>
                <Select TValue="OrderPriority" @bind-SelectedValue="selectedOrder.OrderPriority">
                    @foreach (OrderPriority priority in Enum.GetValues(typeof(OrderPriority)))
                    {
                        <SelectItem TValue="OrderPriority" Value="@priority">@priority.GetDescription()</SelectItem>
                    }
                </Select>
            </Field>

            <Field>
                <FieldLabel>Дата</FieldLabel>
                <DateEdit @bind-Date="selectedOrder.AdmissionDate" />
            </Field>

            <Field>
                <FieldLabel>Автор</FieldLabel>
                <Select TValue="int" @bind-SelectedValue="selectedOrder.OrderAuthorID">
                    @foreach (var author in authors)
                    {
                        <SelectItem TValue="int" Value="@author.ID">@author.Name</SelectItem>
                    }
                </Select>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="() => editModalRef.Hide()">Отмена</Button>
            <Button Color="Color.Primary" @onclick="UpdateOrder">Сохранить</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
<!-- МОДАЛЬНОЕ ОКНО РЕДАКТИРОВАНИЯ -->
<!-- МОДАЛЬНОЕ ОКНО УДАЛЕНИЯ -->
<Modal @ref="deleteModalRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Удаление заказа</ModalTitle>
            <CloseButton @onclick="() => deleteModalRef.Hide()" />
        </ModalHeader>
        <ModalBody>
            <p>Вы уверены, что хотите удалить этот заказ?</p>

            <Field>
                <FieldLabel>Номер заказа</FieldLabel>
                <TextEdit @bind-Text="selectedOrder.OrderNumber" ReadOnly />
             </Field>

             <Field>
                 <FieldLabel>Статус</FieldLabel>
                 <Select TValue="OrderStatus" @bind-SelectedValue="selectedOrder.OrderStatus" Disabled>
                    @foreach (OrderStatus status in Enum.GetValues(typeof(OrderStatus)))
                    {
                        <SelectItem TValue="OrderStatus" Value="@status">@status.GetDescription()</SelectItem>
                    }
                </Select>
            </Field>

            <Field>
                <FieldLabel>Приоритет</FieldLabel>
                <Select TValue="OrderPriority" @bind-SelectedValue="selectedOrder.OrderPriority" Disabled>
                    @foreach (OrderPriority priority in Enum.GetValues(typeof(OrderPriority)))
                    {
                        <SelectItem TValue="OrderPriority" Value="@priority">@priority.GetDescription()</SelectItem>
                    }
                </Select>
            </Field>

            <Field>
                <FieldLabel>Дата</FieldLabel>
                <DateEdit @bind-Date="selectedOrder.AdmissionDate" ReadOnly />
             </Field>

             <Field>
                 <FieldLabel>Автор</FieldLabel>
                 <TextEdit Text="@(selectedOrder.OrderAuthor?.Name ?? "Не указан")" ReadOnly />
             </Field>
         </ModalBody>
         <ModalFooter>
             <Button Color="Color.Secondary" @onclick="() => deleteModalRef.Hide()">Отмена</Button>
             <Button Color="Color.Danger" @onclick="ConfirmDelete">Удалить</Button>
         </ModalFooter>
     </ModalContent>
 </Modal>
 <!-- МОДАЛЬНОЕ ОКНО УДАЛЕНИЯ -->
 <!-- КОД -->
 @code {
    private Modal addModalRef = new Modal();
    private Modal editModalRef = new Modal();
    private Modal deleteModalRef = new Modal();
    private Modal furnituresModalRef = new Modal();
    private Modal imageModalRef = new Modal();
    private Modal drawingModalRef = new Modal();

    private List<Order> orders = new();
    private List<FurnitureName> FurnitureNames = new();
    private List<OrderAuthor> authors = new();

    private string searchTerm = "";

    private Order newOrder = new()
        {
            OrderStatus = OrderStatus.Generated,
            OrderPriority = OrderPriority.Standart,
            AdmissionDate = DateTime.Today
        };
    private List<Furniture> newFurnitures = new();

    private Order selectedOrder = new();
    private Furniture selectedFurniture = new();
    private List<Furniture> selectedFurnitures = new();

    private Order currentOrder;
    private string currentImage = "";
    private string currentDrawing = "";

    <!-- ИНИЦИАЛИЗАЦИЯ -->
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        FurnitureNames = await OrderService.GetAllFurnitureNames();
        authors = await OrderService.GetAllAuthors();
    }
    <!-- ИНИЦИАЛИЗАЦИЯ -->
    <!-- ПОКАЗАТЬ МОДАЛЬНОЕ ОКНО С ПОЗИЦИЯМИ ОСНАСТКИ -->
    private void ShowFurnituresModal(Order order)
    {
        currentOrder = order;
        furnituresModalRef.Show();
    }

    <!-- ЗАКРЫТЬ МОДАЛЬНОЕ ОКНО С ПОЗИЦИЯМИ ОСНАСТКИ -->
    private void HideFurnituresModal()
    {
        furnituresModalRef.Hide();
        currentOrder = null;
    }

    <!-- ПОКАЗАТЬ МОДАЛЬНОЕ ОКНО ДЛЯ ИЗОБРАЖЕНИЯ -->
    private void ShowImageModal(string imageUrl)
    {
        currentImage = imageUrl;
        imageModalRef.Show();
    }

    <!-- ЗАКРЫТЬ МОДАЛЬНОЕ ОКНО ДЛЯ ИЗОБРАЖЕНИЯ -->
    private void HideImageModal()
    {
        imageModalRef.Hide();
        currentImage = "";
    }

    <!-- ПОКАЗАТЬ МОДАЛЬНОЕ ОКНО ДЛЯ ЧЕРТЕЖА -->
    private void ShowDrawingModal(string drawingUrl)
    {
        currentDrawing = drawingUrl;
        drawingModalRef.Show();
    }

    <!-- ЗАКРЫТЬ МОДАЛЬНОЕ ОКНО ДЛЯ ЧЕРТЕЖА -->
    private void HideDrawingModal()
    {
        drawingModalRef.Hide();
        currentDrawing = "";
    }

    <!-- ПОКАЗАТЬ МОДАЛЬНОЕ ОКНО ДОБАВЛЕНИЯ -->
    private void ShowAddModal()
    {
        newFurnitures = new List<Furniture>();
        AddNewFurniture();

        newOrder = new Order
            {
                OrderStatus = OrderStatus.Generated,
                OrderPriority = OrderPriority.Standart,
                AdmissionDate = DateTime.Today
            };

        addModalRef.Show();
    }
    <!-- ПОКАЗАТЬ МОДАЛЬНОЕ ОКНО ДОБАВЛЕНИЯ -->
    <!-- ЗАКРЫТЬ МОДАЛЬНОЕ ОКНО ДОБАВЛЕНИЯ -->
    private void HideAddModal()
    {
        addModalRef.Hide();
    }
    <!-- ЗАКРЫТЬ МОДАЛЬНОЕ ОКНО ДОБАВЛЕНИЯ -->
    <!-- ДОБАВИТЬ НОВУЮ ОСНАСТКУ -->
    private void AddNewFurniture()
    {
        newFurnitures.Add(new Furniture
            {
                FurnitureNameID = 0,
                OrderQuantity = 1
            });
    }

    <!-- УДАЛИТЬ ОСНАСТКУ -->
    private void RemoveFurniture(Furniture furniture)
    {
        newFurnitures.Remove(furniture);
    }

    <!-- ДОБАВИТЬ НОВУЮ ОСНАСТКУ ДЛЯ РЕДАКТИРОВАНИЯ -->
    private void AddNewSelectedFurniture()
    {
        selectedFurnitures.Add(new Furniture
            {
                FurnitureNameID = 0,
                OrderQuantity = 1
            });
    }

    <!-- УДАЛИТЬ ОСНАСТКУ ПРИ РЕДАКТИРОВАНИИ -->
    private void RemoveSelectedFurniture(Furniture furniture)
    {
        selectedFurnitures.Remove(furniture);
    }

    <!-- РЕДАКТИРОВАТЬ ЗАКАЗ -->
    private void EditOrder(Order order)
    {
        selectedOrder = new Order
            {
                ID = order.ID,
                OrderNumber = order.OrderNumber,
                OrderStatus = order.OrderStatus,
                OrderPriority = order.OrderPriority,
                AdmissionDate = order.AdmissionDate,
                OrderAuthorID = order.OrderAuthorID,
                OrderAuthor = order.OrderAuthor
            };

        selectedFurnitures = new List<Furniture>();
        if (order.Furnitures?.Any() == true)
        {
            foreach (var furniture in order.Furnitures)
            {
                selectedFurnitures.Add(new Furniture
                    {
                        ID = furniture.ID,
                        OrderQuantity = furniture.OrderQuantity,
                        FurnitureNameID = furniture.FurnitureNameID,
                        FurnitureName = null
                    });
            }
        }
        else
        {
            AddNewSelectedFurniture();
        }

        editModalRef.Show();
    }
    <!-- РЕДАКТИРОВАТЬ ЗАКАЗ -->
    <!-- СОХРАНИТЬ ЗАКАЗ -->
    private async Task SaveOrder()
    {
        if (newFurnitures.Any(f => f.FurnitureNameID <= 0))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Пожалуйста, выберите наименование для всех позиций оснастки!");
            return;
        }

        if (newOrder.OrderAuthorID <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Пожалуйста, выберите автора!");
            return;
        }

        try
        {
            newOrder.Furnitures = newFurnitures;
            foreach (var furniture in newOrder.Furnitures)
            {
                furniture.Order = newOrder;
                furniture.FurnitureName = null;
            }

            await OrderService.CreateOrder(newOrder, newFurnitures);
            await Refresh();
            await addModalRef.Hide();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при сохранении: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Ошибка при сохранении!");
        }
    }
    <!-- СОХРАНИТЬ ЗАКАЗ -->
    <!-- ОБНОВИТЬ ЗАКАЗ -->
    private async Task UpdateOrder()
    {
        if (selectedOrder != null)
        {
            if (selectedFurnitures.Any(f => f.FurnitureNameID <= 0))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Пожалуйста, выберите наименование для всех позиций оснастки!");
                return;
            }

            try
            {
                selectedOrder.Furnitures = selectedFurnitures;
                foreach (var furniture in selectedOrder.Furnitures)
                {
                    furniture.FurnitureName = null;
                }

                await OrderService.UpdateOrder(selectedOrder);
                await editModalRef.Hide();
                await Refresh();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при обновлении: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("alert", $"Ошибка при обновлении: {ex.Message}");
            }
        }
    }
    <!-- ОБНОВИТЬ ЗАКАЗ -->
    <!-- УДАЛИТЬ ЗАКАЗ -->
    private void DeleteOrder(Order order)
    {
        selectedOrder = new Order
            {
                ID = order.ID,
                OrderNumber = order.OrderNumber,
                OrderStatus = order.OrderStatus,
                OrderPriority = order.OrderPriority,
                AdmissionDate = order.AdmissionDate,
                OrderAuthor = order.OrderAuthor,
                Furnitures = order.Furnitures?.ToList() ?? new List<Furniture>()
            };

        if (order.Furnitures?.Any() == true)
        {
            var originalFurniture = order.Furnitures.First();
            selectedFurniture = new Furniture
                {
                    ID = originalFurniture.ID,
                    OrderQuantity = originalFurniture.OrderQuantity,
                    FurnitureNameID = originalFurniture.FurnitureNameID,
                    FurnitureName = originalFurniture.FurnitureName
                };
            selectedOrder.Furnitures.Add(selectedFurniture);
        }
        else
        {
            selectedFurniture = new Furniture();
        }

        deleteModalRef.Show();
    }
    <!-- УДАЛИТЬ ЗАКАЗ -->
    <!-- ПОДТВЕРДИТЬ УДАЛЕНИЕ ЗАКАЗА -->
    private async Task ConfirmDelete()
    {
        if (selectedOrder != null)
        {
            await OrderService.DeleteOrder(selectedOrder.ID);
            await Refresh();
            await deleteModalRef.Hide();
        }
    }
    <!-- ПОДТВЕРДИТЬ УДАЛЕНИЕ ЗАКАЗА -->
    <!-- ОБНОВИТЬ ДАННЫЕ -->
    private async Task Refresh()
    {
        orders = new List<Order>();
        StateHasChanged();

        orders = await OrderService.GetAllOrders();
        StateHasChanged();
    }
    <!-- ОБНОВИТЬ ДАННЫЕ -->
    <!-- ПОЛУЧИТЬ НАИМЕНОВАНИЕ ОСНАСТКИ -->
    private string GetFurnitureName(int FurnitureNameId)
    {
        if (selectedFurniture?.FurnitureName != null && selectedFurniture.FurnitureNameID == FurnitureNameId)
            return selectedFurniture.FurnitureName.Name;

        var name = FurnitureNames?.FirstOrDefault(x => x.ID == FurnitureNameId);
        return name?.Name ?? "Неизвестно";
    }
    <!-- ПОЛУЧИТЬ НАИМЕНОВАНИЕ ОСНАСТКИ -->
    private List<Order> filteredOrders => string.IsNullOrWhiteSpace(searchTerm)
        ? orders
        : orders.Where(o =>
            (o.OrderNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (o.OrderStatus.GetDescription()?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (o.OrderPriority.GetDescription()?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (o.AdmissionDate.ToString("dd/MM/yyyy")?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (o.OrderAuthor?.Name?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (o.OrderAuthor?.Division.GetDescription()?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)).ToList();
}