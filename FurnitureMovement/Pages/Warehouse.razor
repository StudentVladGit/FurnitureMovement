@page "/warehouse"
@using FurnitureMovement.Data
@using FurnitureMovement.Services
@using Blazorise
@using Blazorise.DataGrid
@inject IOrderService OrderService
@inject IJSRuntime JSRuntime

<PageTitle>Склад оснастки</PageTitle>

<h3>Учет оснастки на складе</h3>

<DataGrid TItem="WarehouseItem"
          Data="@warehouseItems"
          ShowPager="true"
          PageSize="10"
@ref="dataGrid">
    <DataGridColumns>
        <DataGridColumn TItem="WarehouseItem" Field="@nameof(WarehouseItem.ID)" Caption="ID" />
        <DataGridColumn TItem="WarehouseItem" Field="@nameof(WarehouseItem.FurnitureName)" Caption="Наименование оснастки" />
        <DataGridColumn TItem="WarehouseItem" Field="@nameof(WarehouseItem.Quantity)" Caption="Количество" />
        <DataGridColumn TItem="WarehouseItem" Field="@nameof(WarehouseItem.AdmissionDate)" Caption="Дата поступления">
            <DisplayTemplate Context="item">
                @item.AdmissionDate.ToString("dd/MM/yyyy")
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="WarehouseItem" Caption="Материал">
            <DisplayTemplate Context="item">
                @(item.Material ?? "Не указано")
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="WarehouseItem" Caption="Чертеж">
            <DisplayTemplate Context="item">
                @if (!string.IsNullOrEmpty(item.Drawing) && item.Drawing != "Не указано")
                {
                    <Button Color="Color.Info" Size="Size.Small" @onclick="() => ShowDrawingModal(item.Drawing)">
                        Показать чертеж
                    </Button>
                }
                else
                {
                    <span>Не указано</span>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="WarehouseItem" Caption="Изображение">
            <DisplayTemplate Context="item">
                @if (!string.IsNullOrEmpty(item.Image) && item.Image != "Не указано")
                {
                    <Button Color="Color.Info" Size="Size.Small" @onclick="() => ShowImageModal(item.Image)">
                        Показать фото
                    </Button>
                }
                else
                {
                    <span>Не указано</span>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="WarehouseItem" Caption="Действия" Sortable="false">
            <DisplayTemplate Context="item">
                <Button Color="Color.Danger" Size="Size.Small" @onclick="() => ShowRemoveModal(item.ID, item.Quantity)">
                    Списать
                </Button>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
</DataGrid>

<!-- МОДАЛЬНОЕ ОКНО ДЛЯ ИЗОБРАЖЕНИЯ -->
<Modal @ref="imageModalRef" Centered>
    <ModalContent Style="text-align: center;">
        <ModalHeader>
            <ModalTitle>Просмотр изображения</ModalTitle>
            <CloseButton @onclick="HideImageModal" />
        </ModalHeader>
        <ModalBody>
            @if (!string.IsNullOrEmpty(currentImage) && currentImage != "Не указано")
            {
                <img src="@currentImage" alt="Изображение оснастки" style="max-width: 90%; max-height: 80vh;" />
            }
            else
            {
                <p>Изображение недоступно</p>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideImageModal">Закрыть</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- МОДАЛЬНОЕ ОКНО ДЛЯ ЧЕРТЕЖА -->
<Modal @ref="drawingModalRef" Centered>
    <ModalContent Style="text-align: center;">
        <ModalHeader>
            <ModalTitle>Просмотр чертежа</ModalTitle>
            <CloseButton @onclick="HideDrawingModal" />
        </ModalHeader>
        <ModalBody>
            @if (!string.IsNullOrEmpty(currentDrawing) && currentDrawing != "Не указано")
            {
                <img src="@currentDrawing" alt="Чертеж оснастки" style="max-width: 90%; max-height: 80vh;" />
            }
            else
            {
                <p>Чертеж недоступен</p>
            }
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideDrawingModal">Закрыть</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<!-- МОДАЛЬНОЕ ОКНО ДЛЯ СПИСАНИЯ -->
<Modal @ref="removeModalRef">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Списание оснастки</ModalTitle>
            <CloseButton @onclick="HideRemoveModal" />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Выберите количество для списания (доступно: @availableQuantity)</FieldLabel>
                <NumericEdit @bind-Value="quantityToRemove" Min="1" Max="@availableQuantity" />
                @if (quantityToRemove > availableQuantity)
                {
                    <FieldHelp Style="color: red;">Количество не может превышать доступное!</FieldHelp>
                }
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideRemoveModal">Отмена</Button>
            <Button Color="Color.Danger" @onclick="ConfirmRemove" Disabled="@(quantityToRemove > availableQuantity || quantityToRemove <= 0)">Списать</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private DataGrid<WarehouseItem> dataGrid;
    private List<WarehouseItem> warehouseItems = new();
    private Modal imageModalRef = new Modal();
    private Modal drawingModalRef = new Modal();
    private Modal removeModalRef = new Modal();
    private string currentImage = "";
    private string currentDrawing = "";
    private int itemIdToRemove;
    private long availableQuantity;
    private long quantityToRemove;

    protected override async Task OnInitializedAsync()
    {
        await LoadWarehouseItems();
    }

    private async Task LoadWarehouseItems()
    {
        warehouseItems = await OrderService.GetAllWarehouseItems();
    }

    private void ShowRemoveModal(int id, long quantity)
    {
        itemIdToRemove = id;
        availableQuantity = quantity;
        quantityToRemove = 1; // Устанавливаем начальное значение
        removeModalRef.Show();
    }

    private void HideRemoveModal()
    {
        removeModalRef.Hide();
        quantityToRemove = 0; // Сбрасываем значение
    }

    private async Task ConfirmRemove()
    {
        if (quantityToRemove > 0 && quantityToRemove <= availableQuantity)
        {
            try
            {
                await OrderService.RemoveFromWarehouse(itemIdToRemove, quantityToRemove);
                await JSRuntime.InvokeVoidAsync("alert", $"Списано {quantityToRemove} единиц оснастки");
                await LoadWarehouseItems();
                HideRemoveModal();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
            }
        }
    }

    private void ShowImageModal(string imageUrl)
    {
        currentImage = imageUrl;
        imageModalRef.Show();
    }

    private void HideImageModal()
    {
        imageModalRef.Hide();
        currentImage = "";
    }

    private void ShowDrawingModal(string drawingUrl)
    {
        currentDrawing = drawingUrl;
        drawingModalRef.Show();
    }

    private void HideDrawingModal()
    {
        drawingModalRef.Hide();
        currentDrawing = "";
    }
}