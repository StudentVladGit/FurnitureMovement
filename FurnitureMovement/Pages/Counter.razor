@page "/counter"
@using FurnitureMovement.Data
@using FurnitureMovement.Services
@using Blazorise
@using Blazorise.DataGrid
@inject IOrderService OrderService

<PageTitle>ТАБЛИЦА</PageTitle>

<h1>ТАБЛИЦА ОСНАСТКИ</h1>

<Button Color="Color.Primary" Clicked="@(() => showAddModal = true)" Class="mb-3">
    Добавить заказ
</Button>

@if (orders == null)
{
    <p>Загрузка данных...</p>
}
else
{
    <DataGrid TItem="Order"
              Data="@orders"
              ShowPager="true">
        <DataGridColumns>
            <DataGridColumn TItem="Order" Field="@nameof(Order.ID)" Caption="ID" />
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderNumber)" Caption="Номер" />
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderName)" Caption="Наименование" />
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderQuantity)" Caption="Количество" />
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderStatus)" Caption="Статус">
                <DisplayTemplate Context="order">
                    @Enum.GetName(typeof(OrderStatus), order.OrderStatus)
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Order" Field="@nameof(Order.AdmissionDate)" Caption="Дата">
                <DisplayTemplate Context="order">
                    @order.AdmissionDate.ToString("dd/MM/yyyy")
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderAuthor)" Caption="Автор">
                <DisplayTemplate Context="order">
                    @Enum.GetName(typeof(OrderAuthor), order.OrderAuthor)
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
    </DataGrid>
}

<!-- Модальное окно для добавления заказа -->
<Modal @ref="addModal" Visible="@showAddModal" VisibleChanged="@((v) => showAddModal = v)">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Добавить новый заказ</ModalTitle>
            <CloseButton Clicked="@(() => showAddModal = false)" />
        </ModalHeader>
        <ModalBody>
            <!-- Здесь будет форма для добавления заказа -->
            <p>Форма будет добавлена позже</p>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@(() => showAddModal = false)">
                Отмена
            </Button>
            <Button Color="Color.Primary" Clicked="@SaveOrder">
                Сохранить
            </Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private List<Order> orders;
    private bool showAddModal = false;
    private Modal addModal;

    private Order newOrder = new Order(); // Для хранения данных нового заказа

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        orders = await OrderService.GetAllOrders();
    }

    private async Task SaveOrder()
    {
        // Логика сохранения заказа
        showAddModal = false;
        await LoadOrders(); // Перезагружаем данные после сохранения
    }
}