@page "/counter"
@using FurnitureMovement.Data
@using FurnitureMovement.Services
@inject IOrderService OrderService

<PageTitle>ТАБЛИЦА</PageTitle>

<h1>ТАБЛИЦА ОСНАСТКИ</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="Create">Создать</button>
<button class="btn btn-primary" @onclick="Update">Редактировать</button>
<button class="btn btn-primary" @onclick="Delete">Удалить</button>
<button class="btn btn-primary" @onclick="Refresh">Обновить</button>
<input type="text" class="textbox" placeholder="Поиск" />

<Table>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>ID</TableHeaderCell>
            <TableHeaderCell>Номер заказа</TableHeaderCell>
            <TableHeaderCell>Наименование</TableHeaderCell>
            <TableHeaderCell>Количество</TableHeaderCell>
            <TableHeaderCell>Статус</TableHeaderCell>
            <TableHeaderCell>Дата заказа</TableHeaderCell>
            <TableHeaderCell>Автор заказа</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var order in orders)
        {
            <TableRow>
                <TableCell>@order.ID</TableCell>
                <TableCell>@order.OrderNumber</TableCell>
                <TableCell>@order.OrderName</TableCell>
                <TableCell>@order.OrderQuantity</TableCell>
                <TableCell>@order.OrderStatus</TableCell>
                <TableCell>@order.AdmissionDate.ToShortDateString()</TableCell>
                <TableCell>@order.OrderAuthor</TableCell>
            </TableRow>
        }
    </TableBody>
</Table>

@code {
    private List<Order> orders = new();
    public int currentCount = 0;

    private async Task Refresh()
    {
        orders = await OrderService.GetAllOrders();
        StateHasChanged(); // Принудительное обновление компонента
    }

    private async void Create()
    {
        string number = currentCount.ToString();
        var order = new Order
        {
            OrderNumber = "ORD - " + number,
            OrderName = "Пресс - форма",
            OrderQuantity = 10, // Тип int, но в модели long
            OrderStatus = "Заказ оформлен",
            AdmissionDate = DateTime.Now,
            OrderAuthor = "Иванов И.И."
        };

        await OrderService.CreateOrder(order);
        currentCount++;
        await Refresh(); // Обновляем данные после создания
    }

    private async void Delete()
    {
        await OrderService.Delete(1); // Удаляем заказ с ID = 1
        await OrderService.Delete(2); // Удаляем заказ с ID = 2
        await OrderService.Delete(3); // Удаляем заказ с ID = 3
        await Refresh(); // Обновляем данные после удаления
    }

    private async void Update()
    {
        var updateOrder = new Order
        {
            ID = 1, // Указываем ID заказа, который нужно обновить
            OrderNumber = "ORD - 1",
            OrderName = "Штамп",
            OrderQuantity = 5,
            OrderStatus = "Заказ оформлен",
            AdmissionDate = DateTime.Now,
            OrderAuthor = "Петров П.П."
        };
        await OrderService.Update(updateOrder);
        await Refresh(); // Обновляем данные после редактирования
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh(); // Загружаем данные при инициализации
    }
}