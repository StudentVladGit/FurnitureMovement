@page "/counter"
@using FurnitureMovement.Data
@using FurnitureMovement.Services
@using Blazorise
@using Blazorise.DataGrid
@inject IOrderService OrderService

<PageTitle>ТАБЛИЦА</PageTitle>

<h1>ТАБЛИЦА ОСНАСТКИ</h1>

<!-- Кнопка "Добавить" -->
<button class="btn btn-primary" @onclick="ShowAddModal">Добавить</button>

@if (orders == null)
{
    <p>Загрузка данных...</p>
}
else
{
    <DataGrid TItem="Order"
              Data="@orders"
              ShowPager="true">
        <DataGridColumns>
            <DataGridColumn TItem="Order" Field="@nameof(Order.ID)" Caption="ID" />
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderNumber)" Caption="Номер" />
            <DataGridColumn TItem="Order" Field="@nameof(Order.OrderName)" Caption="Наименование" />
            <DataGridColumn TItem="OrderFurniture" Field="@nameof(OrderFurniture.OrderQuantity)" Caption="Количество" />
            <DataGridColumn TItem="Order" Caption="Статус">
                <DisplayTemplate Context="order">
                    @(order.Orders?.FirstOrDefault()?.OrderQuantity.ToString() ?? "0")
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Order" Caption="Дата">
                <DisplayTemplate Context="order">
                    @(order.Orders?.FirstOrDefault()?.AdmissionDate.ToString("dd/MM/yyyy") ?? "")
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="Order" Caption="Автор">
                <DisplayTemplate Context="order">
                    @(order.Orders?.FirstOrDefault()?.OrderAuthor ?? "")
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
    </DataGrid>
}

<Modal @ref="addModal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Добавить новый заказ</ModalTitle>
            <CloseButton @onclick="HideAddModal" />
        </ModalHeader>
        <ModalBody>
            <!-- Поля для ввода данных -->
            <Field>
                <FieldLabel>Номер заказа</FieldLabel>
                <TextEdit @bind-Text="newOrder.OrderNumber" />
            </Field>
            <Field>
                <FieldLabel>Наименование</FieldLabel>
                <TextEdit @bind-Text="newOrder.OrderName" />
            </Field>
            <Field>
                <FieldLabel>Количество</FieldLabel>
                <NumericEdit TValue="long" @bind-Value="newOrderFurniture.OrderQuantity" />
            </Field>
            <Field>
                <FieldLabel>Статус</FieldLabel>
                <Select TValue="OrderStatus" @bind-SelectedValue="newOrderFurniture.OrderStatus">
                    @foreach (OrderStatus status in Enum.GetValues(typeof(OrderStatus)))
                    {
                        <SelectItem TValue="OrderStatus" Value="@status">@status.ToString()</SelectItem>
                    }
                </Select>
            </Field>
            <Field>
                <FieldLabel>Дата</FieldLabel>
                <DateEdit @bind-Date="newOrderFurniture.AdmissionDate" />
            </Field>
            <Field>
                <FieldLabel>Автор</FieldLabel>
                <TextEdit @bind-Text="newOrderFurniture.OrderAuthor" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="HideAddModal">Отмена</Button>
            <Button Color="Color.Primary" @onclick="SaveOrder">Сохранить</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    private List<Order> orders = new();
    private int totalOrders;

    // Модальное окно
    private Modal addModal = new();
    private Order newOrder = new();
    private OrderFurniture newOrderFurniture = new()
        {
            OrderStatus = OrderStatus.Generated,
            AdmissionDate = DateTime.Today,
            OrderQuantity = 1
        };


    protected override async Task OnInitializedAsync()
    {
        await Refresh(); // Загружаем данные при инициализации
    }

    // Показать модальное окно
    private void ShowAddModal()
    {
        newOrder = new Order(); // Сбросить данные формы
        newOrderFurniture = new OrderFurniture
            {
                OrderStatus = OrderStatus.Generated,
                AdmissionDate = DateTime.Today,
                OrderQuantity = 1
            };
        addModal.Show();
    }

    // Скрыть модальное окно
    private void HideAddModal()
    {
        addModal.Hide();
    }

    // Сохранить данные
    private async Task SaveOrder()
    {
        // Связываем Order и OrderFurniture
        newOrder.Orders = new List<OrderFurniture> { newOrderFurniture };
        newOrderFurniture.Order = newOrder;

        await OrderService.CreateOrder(newOrder, newOrderFurniture);
        await Refresh(); // Обновить таблицу
        await addModal.Hide(); // Закрыть модальное окно
    }

    private async Task OnReadData(DataGridReadDataEventArgs<Order> e)
    {
        // Загрузка данных с учетом пагинации, сортировки и фильтрации
        await LoadData(e.Page, e.PageSize, e.Columns);
    }

    private async Task LoadData(int page = 1, int pageSize = 10, IEnumerable<DataGridColumnInfo> columns = null)
    {
        // Пример загрузки данных из сервиса
        var response = await OrderService.GetAllOrders();
        orders = response;
        totalOrders = orders.Count;
    }

    private async Task Refresh()
    {
        await LoadData();
        StateHasChanged(); // Принудительное обновление компонента
    }
}