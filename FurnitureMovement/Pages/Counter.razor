@page "/counter"
@using FurnitureMovement.Data
@using FurnitureMovement.Services
@inject IOrderService OrderService
<PageTitle>ТАБЛИЦА</PageTitle>

<h1>ТАБЛИЦА ОСНАСТКИ</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="Create">Создать</button>
<button class="btn btn-primary" @onclick="Update">Редактировать</button>
<button class="btn btn-primary" @onclick="Delete">Удалить</button>
<button class="btn btn-primary" @onclick="OnInitializedAsync">Обновить</button>
<input type="text" class="textbox" placeholder="Поиск"/>

@if (orders == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Номер заказа</th>
                <th>Наименование</th>
                <th>Количество</th>
                <th>Статус</th>
                <th>Дата заказа</th>
                <th>Автор заказа</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.ID</td>
                    <td>@order.OrderNumber</td>
                    <td>@order.OrderName</td>
                    <td>@order.OrderQuantity</td>
                    <td>@order.OrderStatus</td>
                    <td>@order.AdmissionDate</td>
                    <td>@order.OrderAuthor</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Order> orders = new();
    public int currentCount = 0;

    private async void Create()
    {
        string number = currentCount.ToString();
        var order = new Order
        {
                OrderNumber = "ORD - " + number, /// <summary> Номер заказа </summary>
                OrderName = "Пресс - форма",     /// <summary> Название оснастки </summary>
                OrderQuantity = 10,              /// <summary> Количество </summary>
                OrderStatus = "Заказ оформлен",  /// <summary> Статус заказа </summary>
                AdmissionDate = DateTime.Now,    /// <summary> Дата заказа </summary>
                OrderAuthor = "Иванов И.И."      /// <summary> Автор заказа </summary>
        };

        await OrderService.CreateOrder(order); /// <summary> Создание </summary>
        currentCount = currentCount + 1;
    }

    private async void Delete()
    {
        await OrderService.Delete("1"); /// <summary> Удаление </summary>
        await OrderService.Delete("2"); /// <summary> Удаление </summary>
        await OrderService.Delete("3"); /// <summary> Удаление </summary>
    }

    private async void Update()
    {
        var updateOrder = new Order
        {
                OrderNumber = "ORD - 1",        /// <summary> Номер заказа </summary>
                OrderName = "Штамп",            /// <summary> Название оснастки </summary>
                OrderQuantity = 5,              /// <summary> Количество </summary>
                OrderStatus = "Заказ оформлен", /// <summary> Статус заказа </summary>
                AdmissionDate = DateTime.Now,   /// <summary> Дата заказа </summary>
                OrderAuthor = "Петров П.П."     /// <summary> Автор заказа</summary>
        };
        await OrderService.Update(updateOrder); /// <summary> Редактирование </summary>
    }

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetAllOrders(); /// <summary> Обновление таблицы </summary>
    }
    
    
     
}
